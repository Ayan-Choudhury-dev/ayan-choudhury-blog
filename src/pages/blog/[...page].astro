---
import { type CollectionEntry, getCollection } from 'astro:content';
import PageLayout from '@layouts/PageLayout.astro';
import Container from '@components/Container.astro';
import FormattedDate from '@components/FormattedDate.astro';
import { readingTime } from '@lib/utils';
import BackToPrev from '@components/BackToPrev.astro';
import Pagination from '@components/Pagination.astro';
import PostCard from '@components/PostCard.astro';

export const post_num = 3;

export async function getStaticPaths({ paginate }) {
  const posts = (await getCollection('blog'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return paginate(posts, { pageSize: post_num });
}

function generate_pagination_links(currentPage, totalPages, baseUrl) {
  const links = [];

  for (let i = 1; i <= totalPages; i++) {
    links.push({
      page: i,
      url: `${baseUrl}/${i}`,
      isCurrent: i === currentPage,
    });
  }

  return links;
}

const { page } = Astro.props;
const total_page_num = page.total / post_num;

const paginationLinks = generate_pagination_links(
  page.currentPage,
  total_page_num,
  Astro.url.pathname.replace(/\/\d+$/, '')
);
---

<PageLayout title="Blog" description="Description">
  <Container>
    <!-- Listing Posts -->

    <!-- <h1>Page {page.currentPage}</h1> -->
    <ul>
      {
        page.data.map((post) => (
          <li key={post.slug}>
            <article>
              <PostCard entry={post} />
            </article>
            {/* <a href={`/blog/${post.slug}`}>{post.data.title}</a> */}
          </li>
        ))
      }
    </ul>

    <div
      class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6"
    >
      <div class="flex flex-1 justify-between sm:hidden">
        <a
          href={page.url.prev}
          class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
          >Previous</a
        >
        <a
          href={page.url.next}
          class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
          >Next</a
        >
      </div>
      <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        <div>
          <p class="text-sm text-gray-700">
            Showing
            <span class="font-medium"
              >{page.currentPage * post_num - post_num + 1}</span
            >
            to
            <span class="font-medium">{page.currentPage * post_num}</span>
            of
            <span class="font-medium">{page.total}</span>
            results
          </p>
        </div>
        <div>
          <nav
            class="isolate inline-flex -space-x-px rounded-md shadow-sm"
            aria-label="Pagination"
          >
            <!-- Previous arrow -->
            <a
              href={page.url.prev}
              class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            >
              <span class="sr-only">Previous</span>
              <svg
                class="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fill-rule="evenodd"
                  d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z"
                  clip-rule="evenodd"></path>
              </svg>
            </a>

            {
              paginationLinks.map((link) => (
                <a
                  key={link.page}
                  href={link.url}
                  aria-current={link.isCurrent ? 'page' : ''}
                  class={
                    link.isCurrent
                      ? 'relative z-10 inline-flex items-center bg-indigo-600 px-4 py-2 text-sm font-semibold text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600'
                      : 'relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                  }
                >
                  {link.page}
                </a>
              ))
            }

            <!-- Current: "z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600", Default: "text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0" -->

            <!-- <span class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-inset ring-gray-300 focus:outline-offset-0">...</span> -->

            <!-- Next Arrow -->
            <a
              href={page.url.next}
              class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            >
              <span class="sr-only">Next</span>
              <svg
                class="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fill-rule="evenodd"
                  d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
                  clip-rule="evenodd"></path>
              </svg>
            </a>
          </nav>
        </div>
      </div>
    </div>
  </Container>
</PageLayout>
